/****************************************************************************
**
** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \group qml-location
    \title QML Location Plugin
    QML Support for the Qt Location API.
*/

/*!
    \page qml-location-plugin.html

    \title Location QML Plugin
    \previouspage {index-qtlocation-module.html}{Qt Location Module}

    \brief A QML plugin for the Qt Location API.


    \section1 Overview

    The Qt Location API gives users the capability to write applications that understand a geographical location and movement of the position coordinates. Backend services can be called by the API to detect landmarks and display appropriate information. The QML Location Plugin delivers these capabilities in an easy to use form.

    \section1 Positioning

    \section2 Coordinate

    The \l {QtLocation5::coordinate}{coordinate} is a basic unit of geographical information. The
    \l {QtLocation5::coordinate}{coordinate} type has attributes to hold the \c {latitude},
    \c longitude and \a altitude.

    \section2 Position

    The three dimensional position of an object such as a mobile device can be specified by giving
    the latitude, longitude and altitude.  That is the values held in the
    l\ {QtLocation5::coordinate}{coordinate} type.  Additionally for computation of future
    positions we would like to know if the object is moving, what \l {Position::speed}{speed} it is
    doing and what is the \l {Position::timestamp}{timestamp} of the last position data.  Position
    therefore includes values for the \l {Position::coordinate}{coordinate},
    \l {Position::speed}{speed} and a \l {Position::timestamp}{timestamp}.  \l Position also takes
    responsibility for validation of sensible values for these properties.  These are exposed as
    the \l {Position::latitudeValid}{latitudeValid}, \l {Position::longitudeValid}{longitudeValid},
    \l {Position::altitudeValid}{altitudeValid}, \l {Position::speedValid}{speedValid},
    \l {Position::horizontalAccuracyValid}{horizontalAccuracyValid}, and
    \l {Position::verticalAccuracyValid}{verticalAccuracyValid} properties.


    \section2 PositionSource

    We have a Position type, a \l {QtLocation5::coordinate}{coordinate} type but where do we get
    the data from? It is a good idea to be able to indicate alternative sources.
    Perhaps instead of directly picking up GPS satellites you want to do
    some testing using a datafile. We may also need to manage our
    interaction with the source.

    The \l PositionSource type provides the developer with control,
    within the limits allowed by the platform, of the source of the
    geographical data. The positional data can be sourced from a logfile
    which is in NMEA format.

    \l {http://en.wikipedia.org/wiki/NMEA}{NMEA} is a common text-based protocol for specifying navigational data. For convenience, the \l {PositionSource::nmeaSource}{nmeaSource} property is provided to enable QML applications to read NMEA data from a log file, the source will emit updates according to the time stamp of each NMEA sentence to produce a "replay" of the recorded data.

    \section2 Positioning Types


    \annotatedlist qml-location

    \section1 Maps

    The Map type can be used be used to display a map of the world.  The
    bulk of the functionality is provided by a mapping plugin described
    by the plugin type associated with the Map.

    Various map objects can be added to the map.  These map objects are
    specified in terms of coordinates and meters.

    Interaction with the map objects is done via the MapMouseArea item.

    \section2 Map Types

    \annotatedlist qml-location-maps

*/


